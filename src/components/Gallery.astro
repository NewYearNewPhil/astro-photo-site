---
import { Image } from "astro:assets";
import responsiveImageSizes from "./ResponsiveImageSizes.js";

const { page } = Astro.props as any;
const images = page.data;
const column1 = { images: [] as any[], height: 0 };
const column2 = { images: [] as any[], height: 0 };

for (const image of images) {
	image.widths = responsiveImageSizes.getResponsiveSizes({
		deviceType: "all",
		sourceImageWidth: image.data.src.width,
		widthOnPage: 50,
		mode: "standard",
		topSize: 2880,
	});
	const selectedColumn = column2.height >= column1.height ? column1 : column2;
	selectedColumn.images.push(image);
	selectedColumn.height += image.data.src.height;
}
---

<div class="w-full mb-4 px-4 md:px-0">
	<div class="flex flex-row gap-4 md:gap-10">
		<div class="flex flex-col basis-0 grow gap-4 md:gap-10">
			{
				column1.images.map((image: any, index: number) => (
					<a href={`../${image.slug}/`} aria-label={image.slug}>
						<Image
							widths={image.widths}
							sizes="(min-width: 1540px) 748px, (min-width: 1280px) 620px, (min-width: 1040px) 492px, (min-width: 820px) 364px, calc(47.6vw - 17px)"
							src={image.data.src}
							alt=""
							loading={index >= 5 ? "lazy" : "eager"}
						/>
					</a>
				))
			}
		</div>
		<div class="flex flex-col basis-0 grow gap-4 md:gap-10">
			{
				column2.images.map((image: any, index: number) => (
					<a href={`../${image.slug}/`} aria-label={image.slug}>
						<Image
							widths={image.widths}
							sizes="(min-width: 1540px) 748px, (min-width: 1280px) 620px, (min-width: 1040px) 492px, (min-width: 820px) 364px, calc(47.6vw - 17px)"
							src={image.data.src}
							alt=""
							loading={index >= 5 ? "lazy" : "eager"}
						/>
					</a>
				))
			}
		</div>
	</div>
</div>
<div class="fixed bottom-4 left-0 right-0 flex justify-center w-full">
	<div
		transition:animate="none"
		class="join bg-base-200 shadow-lg idle-hidden transition-opacity duration-200"
	>
		{
			page.currentPage > 1 && (
				<a id="prevPage" href={page.url.prev}>
					<button class="join-item btn" aria-label="<">
						<svg
							class="h-6 w-6 fill-current md:h-8 md:w-8"
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
						>
							<path d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z" />
						</svg>
					</button>
				</a>
			)
		}
		{
			(page.currentPage != page.lastPage || page.currentPage > 1) && (
				<button class="join-item btn cursor-default text-lg">
					{page.currentPage}
				</button>
			)
		}
		{
			page.currentPage != page.lastPage && (
				<a id="nextPage" href={page.url.next}>
					<button class="join-item btn" aria-label=">">
						<svg
							class="h-6 w-6 fill-current md:h-8 md:w-8"
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
						>
							<path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" />
						</svg>
					</button>
				</a>
			)
		}
	</div>
</div>

<script>
	import { navigate } from "astro:transitions/client";
	// changed from https://stackoverflow.com/a/23230280

	document.addEventListener("touchstart", handleTouchStart, false);
	document.addEventListener("touchmove", handleTouchMove, false);

	let xDown: number | undefined = undefined;
	let yDown: number | undefined = undefined;

	function handleTouchStart(evt: TouchEvent) {
		const firstTouch = evt.touches[0];
		xDown = firstTouch.clientX;
		yDown = firstTouch.clientY;
	}

	function handleTouchMove(evt: TouchEvent) {
		if (!xDown || !yDown) {
			return;
		}

		var xUp = evt.touches[0].clientX;
		var yUp = evt.touches[0].clientY;

		var xDiff = xDown - xUp;
		var yDiff = yDown - yUp;

		if (Math.abs(xDiff) > Math.abs(yDiff)) {
			if (xDiff > 0) {
				/* right swipe */
				const nextPage = document.querySelector(
					"#nextPage",
				) as HTMLAnchorElement | null;
				console.log(nextPage);
				if (nextPage) {
					navigate(nextPage.href, { history: "push" });
				}
			} else {
				/* left swipe */
				const prevPage = document.querySelector(
					"#prevPage",
				) as HTMLAnchorElement | null;
				if (prevPage) {
					navigate(prevPage.href, { history: "push" });
				}
			}
		}

		xDown = undefined;
		yDown = undefined;
	}
</script>
<script>
	import init from "./IdleHidden";
	init();
</script>
