---
import { Image } from "astro:assets";

const { page } = Astro.props as any;
const images = page.data;
const column1 = { images: [] as any[], height: 0 };
const column2 = { images: [] as any[], height: 0 };

for (const image of images) {
	const selectedColumn = column2.height >= column1.height ? column1 : column2;
	selectedColumn.images.push(image);
	selectedColumn.height += image.data.src.height;
}
---

<div class="w-full mb-20 px-4 md:px-0">
	<div class="flex flex-row gap-4 md:gap-10">
		<div class="flex flex-col gap-4 md:gap-10">
			{
				column1.images.map((image: any, index: number) => (
					<a href={`../${image.slug}/`}>
						<Image
							widths={[360, 720, 1024, 1920]}
							sizes="(max-width: 360px) 360px, (max-width: 720px) 720px, (max-width: 1024px) 1024px, (max-width: 1920px) 1920px"
							src={image.data.src}
							alt=""
							loading={index >= 5 ? "lazy" : "eager"}
						/>
					</a>
				))
			}
		</div>
		<div class="flex flex-col gap-4 md:gap-10">
			{
				column2.images.map((image: any, index: number) => (
					<a href={`../${image.slug}/`}>
						<Image
							widths={[360, 720, 1024, 1920]}
							sizes="(max-width: 360px) 360px, (max-width: 720px) 720px, (max-width: 1024px) 1024px, (max-width: 1920px) 1920px"
							src={image.data.src}
							alt=""
							loading={index >= 5 ? "lazy" : "eager"}
						/>
					</a>
				))
			}
		</div>
	</div>
</div>
<div class="fixed bottom-4 left-0 right-0 flex justify-center w-full">
	<div transition:animate="none" class="join bg-base-200">
		{
			page.currentPage > 1 && (
				<a id="prevPage" href={page.url.prev}>
					<button class="join-item btn">«</button>
				</a>
			)
		}
		<button class="join-item btn">Page {page.currentPage}</button>
		{
			page.currentPage != page.lastPage && (
				<a id="nextPage" href={page.url.next}>
					{" "}
					<button class="join-item btn">»</button>
				</a>
			)
		}
	</div>
</div>

<script>
    import { navigate } from "astro:transitions/client";
    // changed from https://stackoverflow.com/a/23230280

    document.addEventListener("touchstart", handleTouchStart, false);
    document.addEventListener("touchmove", handleTouchMove, false);

    let xDown: number | undefined = undefined;
    let yDown: number | undefined = undefined;

    function handleTouchStart(evt: TouchEvent) {
        const firstTouch = evt.touches[0];
        xDown = firstTouch.clientX;
        yDown = firstTouch.clientY;
    }

    function handleTouchMove(evt: TouchEvent) {
        if (!xDown || !yDown) {
            return;
        }

        var xUp = evt.touches[0].clientX;
        var yUp = evt.touches[0].clientY;

        var xDiff = xDown - xUp;
        var yDiff = yDown - yUp;

        if (Math.abs(xDiff) > Math.abs(yDiff)) {
            if (xDiff > 0) {
                /* right swipe */
                const nextPage = document.querySelector(
                    "#nextPage",
                ) as HTMLAnchorElement | null;
				console.log(nextPage)
                if (nextPage) {
                    navigate(nextPage.href, { history: "push" });
                }
            } else {
                /* left swipe */
                const prevPage = document.querySelector(
                    "#prevPage",
                ) as HTMLAnchorElement | null;
                if (prevPage) {
                    navigate(prevPage.href, { history: "push" });
                }
            }
        }

        xDown = undefined;
        yDown = undefined;
    }
</script>
